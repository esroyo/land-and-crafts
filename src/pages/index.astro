---
import { getCollection } from 'astro:content';
import { title } from '../common.ts';

import CarouselGallery from '../components/CarouselGallery.astro';
import Logo from '../assets/land-and-crafts.svg';
import Layout from '../layouts/Layout.astro';
import LeafletMarker from '../components/LeafletMarker.astro';
import ProjectCard from '../components/ProjectCard.astro';
import ProjectDetails from '../components/ProjectDetails.astro';

const projects = await getCollection('projects');
const coordinates = projects.map(p => p.data.coordinates).reduce((acc, cur) => [acc[0] + cur[0], acc[1] + cur[1]], [0, 0]).map((sum: number) => sum / projects.length);
const backgroundColor = '#182121';
const headerHeight = '16rem';
const headerHeightSmall = '4rem';
---

<Layout>
    <main style={ `--backgroundColor: ${backgroundColor}; --headerHeight: ${headerHeight}; --headerHeightSmall: ${headerHeightSmall}` }>
        <header class="header" id="headerSection">
            <Logo aria-labeld={ title } role="img" class="logo" />
            <p>Map of <em>site-specific</em> artifacts that explore the relationship between human beings and nature through biocentric and multispecies design. Each project generates an aesthetic experience integrated into the environment, through the use of local materials and traditional or contemporary artisan techniques.</p>
        </header>
        <section class="sidebar" id="sidebarSection">
            { projects.map((project) => <ProjectCard { project } />) }
        </section>
        <section class="map" id="mapSection" data-initial-coordinates={ coordinates }>
            { projects.map((project) => <LeafletMarker { project } />) }
        </section>
        <section class="details hide" id="detailsSection">
            { projects.map((project) => <ProjectDetails { project } />) }
        </section>
    </main>
    <CarouselGallery />
</Layout>

<script>
    import { Map, TileLayer } from 'leaflet';
    import { TILES_URL, getZoom } from '../common.ts';

    const map = new Map(mapSection).setView(mapSection.dataset.initialCoordinates.split(','), getZoom());
    const tile = new TileLayer(`${TILES_URL}/{z}/{x}/{y}.png`, {
      maxZoom: 19,
      attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);
</script>

<style>
main {
  height: 100%;
  display: grid;
  grid-template-columns: minmax(300px, 1fr) 1fr 1fr 1fr 1fr;
  grid-template-rows: var(--headerHeight) 1fr;
  grid-template-areas:
    "header map map map map"
    "sidebar map map map map";

  & > section {
      max-height: 100dvh;
      overflow: auto;
  }
}

.header {
  grid-area: header;
  background: var(--backgroundColor);
  color: white;
  padding: 1rem;
  overflow: auto;
  scrollbar-color: #EEE var(--backgroundColor);

  .logo {
      fill: white;
      width: 100%;
      max-height: 3rem;
  }

  & p {
      font-size: .9rem;
      margin-top: 0;
  }
}

.sidebar {
  grid-area: sidebar;
  background: var(--backgroundColor);
  max-height: calc(100dvh - var(--headerHeight));
  scrollbar-color: #EEE var(--backgroundColor);
}

.map {
  grid-area: map;
  background: #90CCCB;
  height: 100%;
  width: 100%;
}

.details {
  grid-area: 1 / 4 / 3 / 6;
  background: white;
  z-index: 1000; /* same as leaflet max */
  height: 100%;
  width: 100%;

  transition: transform 0.3s ease;

  &.hide {
      transform: translateX(100dvw);
  }
}

@media (max-width: 768px) {
    main {
        grid-template-columns: 1fr;
        grid-template-rows: var(--headerHeightSmall) 1fr 60dvh;
        grid-template-areas:
            "header"
            "map"
            "sidebar";
    }

    .details {
        grid-area: 3 / 1 / 4 / 2;
        transition: transform 0.3s ease;
        &.hide {
            transform: translateY(100dvh);
        }
    }

    .header {
      & p {
          display: none;
      }
    }
</style>
